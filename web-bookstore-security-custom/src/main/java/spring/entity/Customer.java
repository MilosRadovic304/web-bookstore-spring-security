package spring.entity;

import java.util.Collection;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import spring.entity.Role;

//Entity Class is a Java class that is mapped to a database table
//Hibernate and spring will know where to scan for our Entity classes by looking in the spring configuration file 
//called spring-web-servlet.xml and bean id =sessionFactory

@Entity
@Table(name="customer2") //the name of the table in the DB
public class Customer {

	@Id
	//I generated a sequence in DB so everytime I try to insert new row in customer table the value for the ID column will be generated by that sequence 
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator = "id_Sequence")
	@SequenceGenerator(name = "id_Sequence", sequenceName = "id_Sequence", allocationSize=1)
	@Column(name="ID") ////mapping java field to a table column id
	private int id;
	
	@Column(name = "username")
	private String userName;

	@Column(name = "password")
	private String password;
	
	@Column(name="FIRST_NAME") //mapping java field to a table column FIRST_NAME
	private String firstName;
	
	@Column(name="LAST_NAME") //mapping java field to a table column LAST_NAME
	private String lastName;
	
	@Column(name="EMAIL") //mapping java field to a table column EMAIL
	private String email;
	
	
	//Customers can buy many books, since this is many to many relationship we need to add an additional table in DB called Sales
	//Cascading - when we perform some action on the target entity, the same action will be applied to the associated entity.
	@ManyToMany(fetch=FetchType.LAZY, //taking entries from the DB one by one, this is good for performance of the app
			cascade= {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH, CascadeType.REFRESH}) //set all cascadable operations except delete
	//so if we delete a book we will not delete a customer 
	@JoinTable(
		name="sales",
		joinColumns=@JoinColumn(name="customer_id"), //refers to customer_id column in the sales table
		inverseJoinColumns=@JoinColumn(name="book_id")		//refers to book_id column in the sales table
		)
	private List<Book> books;
	
	
	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "customer_roles", 
	joinColumns = @JoinColumn(name = "customer_id"), 
	inverseJoinColumns = @JoinColumn(name = "role_id"))
	private Collection<Role> roles;
	
	
	// default constructor
	public Customer() {
		
		
	}

	
	
	public Customer(String userName, String password, String firstName, String lastName, String email,
			Collection<Role> roles) {
		this.userName = userName;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.roles = roles;
	}

	//getters and setters:
	public int getId() {
		return id;
	}


	public void setId(int id) {
		this.id = id;
	}


	public String getFirstName() {
		return firstName;
	}


	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}


	public String getLastName() {
		return lastName;
	}


	public void setLastName(String lastName) {
		this.lastName = lastName;
	}


	public String getEmail() {
		return email;
	}


	public void setEmail(String email) {
		this.email = email;
	}

	

	public List<Book> getBooks() {
		return books;
	}


	public void setBooks(List<Book> books) {
		this.books = books;
	}


	public String getUserName() {
		return userName;
	}


	public void setUserName(String userName) {
		this.userName = userName;
	}


	public String getPassword() {
		return password;
	}


	public void setPassword(String password) {
		this.password = password;
	}

	
	public Collection<Role> getRoles() {
		return roles;
	}

	public void setRoles(Collection<Role> roles) {
		this.roles = roles;
	}
	
	//toString method
	@Override
	public String toString() {
		return "Customer [id=" + id + ", userName=" + userName + ", password=" + password + ", firstName=" + firstName
				+ ", lastName=" + lastName + ", email=" + email + "]";
	}



	
	
	
}
